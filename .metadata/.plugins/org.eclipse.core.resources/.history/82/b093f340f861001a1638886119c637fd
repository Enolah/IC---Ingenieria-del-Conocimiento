package star;

import java.util.*;



public class aEstrella {

	private double SQRT2= Math.sqrt(2);
	private boolean ejecutarPorPasos;
	private boolean solucionEncontrada;
	private rejilla rejillaObjetivo;
	private boolean problemaInsatisfactible;
	private ArrayList<Nodo> redDeNodos = new ArrayList<Nodo>();
	private ArrayList<Nodo> vectorDeReciclaje = new ArrayList<Nodo>();
	private PriorityQueue<Nodo> listaAbierta = new PriorityQueue<Nodo>();

	public aEstrella(rejilla miRejilla, boolean ejecutarPorPasos2) {
		this.rejillaObjetivo= miRejilla;
		this.ejecutarPorPasos= ejecutarPorPasos2; 
	}

	private void recorridoDescendente(Nodo padre) {
		for (Nodo hijo : padre.getHijo()) {
			hijo.setCosteDesdeInicioHastaMi(
					padre.getCosteDesdeInicioHastaMi() + hijo.getCosteDeDesplazarseDesdePadreHastaMi());
			hijo.setCosteTotal(
					hijo.getPenalizacion() + hijo.getCosteDesdeInicioHastaMi() + hijo.getCosteDesdeMiHastaLaMeta());
			recorridoDescendente(hijo);
		}
	}

	private void resolverConflictoPara(Nodo nodoConflictivo) {
		double costeDelDesplazamiento = 0;
		// COMPROBACION ORTOGONAL
		// ARRIBA
		if (nodoConflictivo.getPosicion().getFirst() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = 1;
		}
		// ABAJO
		if (nodoConflictivo.getPosicion().getFirst() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = 1;
		}
		// IZQUIERDA
		if (nodoConflictivo.getPosicion().getFirst() == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = 1;
		}
		// DERECHA
		if (nodoConflictivo.getPosicion().getFirst() == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = 1;
		}
		// COMPROBACION DIAGONAL
		// ARRIBA DERECHA
		if (nodoConflictivo.getPosicion().getFirst() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = SQRT2;
		}
		// ABAJO IZQUIERDA
		if (nodoConflictivo.getPosicion().getFirst() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = SQRT2;
		}
		// ARRIBA IZQUIERDA
		if (nodoConflictivo.getPosicion().getFirst() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = SQRT2;
		}
		// ABAJO DERECHA
		if (nodoConflictivo.getPosicion().getFirst() - 1 == nodoConflictivo.getPadre().get(1).getPosicion().getFirst()
				&& nodoConflictivo.getPosicion().getSecond() + 1 == nodoConflictivo.getPadre().get(1).getPosicion().getSecond()) {
			costeDelDesplazamiento = SQRT2;
		}
		if (nodoConflictivo.getPadre()[1].getCosteDesdeInicioHastaMi() + costeDelDesplazamiento < nodoConflictivo
				.getCosteDesdeInicioHastaMi()) {
			nodoConflictivo.setcosteDeDesplazarseDesdePadreHastaMi(costeDelDesplazamiento);
			nodoConflictivo.setCosteDesdeInicioHastaMi(nodoConflictivo.getPadre()[1].getCosteDesdeInicioHastaMi()
					+ nodoConflictivo.getCosteDeDesplazarseDesdePadreHastaMi());
			nodoConflictivo.setCosteTotal(nodoConflictivo.getPenalizacion()
					+ nodoConflictivo.getCosteDesdeInicioHastaMi() + nodoConflictivo.getCosteDesdeMiHastaLaMeta());
			nodoConflictivo.getPadre()[0].eliminarHijo(nodoConflictivo);
			nodoConflictivo.getPadre()[1].nuevoHijo(nodoConflictivo);
			recorridoDescendente(nodoConflictivo);
			nodoConflictivo.intercambiarPadres();
		}
		nodoConflictivo.eliminarUltimoPadre();
	}

	private int existeNodo(final int y, final int x) {
		int i = 0;
		boolean noEncontrado = true;
		while (i < redDeNodos.size() && noEncontrado) {
			if (redDeNodos.get(i).getPosicion().first == y && redDeNodos.get(i).getPosicion().second == x) {
				noEncontrado = false;
			} else {
				++i;
			}
		}
		return i;
	}

	private void resuelveCaso(Nodo padre, final int desplY, final int desplX, final double coste)
		{
			if (rejillaObjetivo.getRepresentacionInterna()[padre.getPosicion().first + desplY][padre.getPosicion().second + desplX] != C_PROHIBIDO)
			{
				int i = existeNodo(padre.getPosicion().first + desplY, padre.getPosicion().second + desplX);
				if (i < redDeNodos.size())
				{
					if (redDeNodos.get(i).getPosicion().first != padre.getPosicion().first && redDeNodos.get(i).getPosicion().second != padre.getPosicion().second)
					{
						redDeNodos.get(i).nuevoPadre(padre);
						resolverConflictoPara(redDeNodos.get(i));
					}
				}
				else
				{
					Nodo nuevo = new Nodo(padre, {padre.getPosicion().first + desplY,padre.getPosicion().second + desplX}, coste, rejillaObjetivo.getInformacionInterna [padre.getPosicion().first + desplY][padre.getPosicion().second + desplX], rejillaObjetivo.getMetas());
					padre.nuevoHijo(nuevo);
					listaAbierta.push(nuevo);
					redDeNodos.add(nuevo);
					vectorDeReciclaje.add(nuevo);
				}
			}
		}

	private void expandir(Nodo padre) {
		if (padre.getPosicion().first - 1 >= 0) // NODO(FILA,COLUMNA)//
												// DESPLAZAMIENTOS
												// ORTOGONALES
		{
			resuelveCaso(padre, -1, 0, 1); // ABAJO
		}
		if (padre.getPosicion().first + 1 < rejillaObjetivo.getAlto()) {
			resuelveCaso(padre, 1, 0, 1); // ARRIBA
		}
		if (padre.getPosicion().second - 1 >= 0) {
			resuelveCaso(padre, 0, -1, 1); // IZQUIERDA
		}
		if (padre.getPosicion().second + 1 < rejillaObjetivo.getAncho()) {
			resuelveCaso(padre, 0, 1, 1); // DERECHA
		}
		if (padre.getPosicion().first - 1 >= 0 && padre.getPosicion().second - 1 >= 0) // DESPLAZAMIENTOS
																						// DIAGONALES
		{
			resuelveCaso(padre, -1, -1, SQRT2); // ABAJO IZQUIERDA
		}
		if (padre.getPosicion().first + 1 < rejillaObjetivo.getAlto() && padre.getPosicion().second - 1 >= 0) {
			resuelveCaso(padre, 1, -1, SQRT2); // ARRIBA IZQUIERDA
		}
		if (padre.getPosicion().first - 1 >= 0 && padre.getPosicion().second + 1 < rejillaObjetivo.getAncho()) {
			resuelveCaso(padre, -1, 1, SQRT2); // ABAJO DERECHA
		}
		if (padre.getPosicion().first + 1 < rejillaObjetivo.getAlto()
				&& padre.getPosicion().second + 1 < rejillaObjetivo.getAncho()) {
			resuelveCaso(padre, 1, 1, SQRT2); // ARRIBA DERECHA
		}
	}

}
